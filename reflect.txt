One of the major advantages of Multithreading is that it allows the execution of multiple parts of a program at the same time, it leads to maximum utilization of the CPU by multitasking. It creates a process that consists of multiple threads of execution, and the parallel execution of tasks can lead to more efficient use of resource of the system, hence the better performance and concurrency. In this workshop, we utilize the functionality proved by <thread.h> to creates 4 threads to convert the texts from a file into binary form (t1, t2, t3, t4). Instead of reading the data sequentially, we can now partition the data equally into 4 parts and let these 4 threads to process at the same time. We join() the 4 threads together to the main thread after they finish the tasks.

The reason we use binary files is because they occupy less storage space, and data can be transmitted faster comparing to regular text files. They are faster and easier for our program to read and write which make them the best way to store data information. In Void SecureData:backup(), we create an ofstream object in std::ios::binary mode so we can write data in bytes into a file. In void SecureData::storage(), we use an ifstream object to read in the data from a file in binary mode.

Using std::bind helps us to manipulate an existing functionâ€™s argument order or fix some arguments, it makes the function more configurable and we can modify the function according to the desired output. In SecureData Module, function converter is binded with _1, key, nbytes/4 and Cryptor(), the last 3 arguments of fn_conv will always be the same and we only care about the _1 argument hence saving us lines of code when the application expands.
